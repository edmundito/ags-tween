// room 102 (GUI Control Tests) script file

int _btnTextColor;
int _lblTextColor;
int _txtTextColor;

#ifdef SCRIPT_API_v360
int _btnTransparency;
#endif 

int UpdateRedInColor(int color, int red) {
  return Game.GetColorFromRGB(red, TweenGame.GetGFromColor(color), TweenGame.GetBFromColor(color));
}

int UpdateGreenInColor(int color, int green) {
  return Game.GetColorFromRGB(TweenGame.GetRFromColor(color), green, TweenGame.GetBFromColor(color));
}

int UpdateBlueInColor(int color, int blue) {
  return Game.GetColorFromRGB(TweenGame.GetRFromColor(color), TweenGame.GetGFromColor(color), blue);
}

int UpdateRedInButtonTextColor(int red) { return UpdateRedInColor(_btnTextColor, red); }
int UpdateGreenInButtonTextColor(int green) { return UpdateGreenInColor(_btnTextColor, green); }
int UpdateBlueInButtonTextColor(int blue) { return UpdateBlueInColor(_btnTextColor, blue); }

int UpdateRedInLabelTextColor(int red) { return UpdateRedInColor(_lblTextColor, red); }
int UpdateGreenInLabelTextColor(int green) { return UpdateGreenInColor(_lblTextColor, green); }
int UpdateBlueInLabelTextColor(int blue) { return UpdateBlueInColor(_lblTextColor, blue); }

int UpdateRedInTextBoxTextColor(int red) { return UpdateRedInColor(_txtTextColor, red); }
int UpdateGreenInTextBoxTextColor(int green) { return UpdateGreenInColor(_txtTextColor, green); }
int UpdateBlueInTextBoxTextColor(int blue) { return UpdateBlueInColor(_txtTextColor, blue); }

#ifdef SCRIPT_API_v350
int _lstSelectedBackColor, _lstSelectedTextColor, _lstTextColor;

int UpdateRedInListBoxSeletedBackColor(int red) { return UpdateRedInColor(_lstSelectedBackColor, red); }
int UpdateGreenInListBoxSeletedBackColor(int green) { return UpdateGreenInColor(_lstSelectedBackColor, green); }
int UpdateBlueInListBoxSeletedBackColor(int blue) { return UpdateBlueInColor(_lstSelectedBackColor, blue); }

int UpdateRedInListBoxSeletedTextColor(int red) { return UpdateRedInColor(_lstSelectedTextColor, red); }
int UpdateGreenInListBoxSeletedTextColor(int green) { return UpdateGreenInColor(_lstSelectedTextColor, green); }
int UpdateBlueInListBoxSeletedTextColor(int blue) { return UpdateBlueInColor(_lstSelectedTextColor, blue); }

int UpdateRedInListBoxTextColor(int red) { return UpdateRedInColor(_lstTextColor, red); }
int UpdateGreenInListBoxTextColor(int green) { return UpdateGreenInColor(_lstTextColor, green); }
int UpdateBlueInListBoxTextColor(int blue) { return UpdateBlueInColor(_lstTextColor, blue); }
#endif

function SaveGUIControls() {
  _btnTextColor = btnTest.TextColor;

  _lblTextColor = lblTest.TextColor;

  _txtTextColor = txtTest.TextColor;

  #ifdef SCRIPT_API_v350
  _lstSelectedBackColor = lstTest.SelectedBackColor;
  _lstSelectedTextColor = lstTest.SelectedTextColor;
  _lstTextColor = lstTest.TextColor;
  #endif

  #ifdef SCRIPT_API_v360
  _btnTransparency = btnTest.Transparency;
  #endif
}

function RestoreGUIControls() {
  btnTest.TextColor = _btnTextColor;

  lblTest.TextColor = _lblTextColor;

  txtTest.TextColor = _txtTextColor;

  #ifdef SCRIPT_API_v350
  lstTest.SelectedBackColor = _lstSelectedBackColor;
  lstTest.SelectedTextColor = _lstSelectedTextColor;
  lstTest.TextColor = _lstTextColor;
  #endif

  #ifdef SCRIPT_API_v360
  btnTest.Transparency = _btnTransparency;
  btnTest.Visible = true;
  #endif
}

function testTransparency() {
  #ifdef SCRIPT_API_v360
  Test("GUIControl.Transparency");

  btnTest.Transparency = 0;
  btnTest.TweenTransparency(0.5, 50);
  ExpectIntToBe(btnTest.Transparency, 50, "Transparency");

  btnTest.Visible = false;
  btnTest.Transparency = 100;
  btnTest.TweenTransparency(0.5, -20);
  ExpectIntToBe(btnTest.Transparency, 0, "Min Transparency");
  ExpectIntToBe(btnTest.Visible, true, "Visible at 0 transparency");

  RestoreGUIControls();
  btnTest.TweenTransparency(0.5, 120);
  ExpectIntToBe(btnTest.Transparency, 100, "Max Transparency");
  ExpectIntToBe(btnTest.Visible, false, "Not visible at 100 transparency");

  btnTest.Transparency = 0;
  btnTest.Visible = true;
  btnTest.TweenTransparency(0.5, 50, eEaseLinearTween, eNoBlockTween);
  btnTest.StopTweenTransparency(eFinishTween);
  ExpectIntToBe(btnTest.Transparency, 50, "Stop Transparency");

  btnTest.Transparency = 0;
  btnTest.TweenFadeOut(0.5);
  ExpectIntToBe(btnTest.Transparency, 100, "FadeOut");

  btnTest.TweenFadeIn(0.5);
  ExpectIntToBe(btnTest.Transparency, 0, "FadeIn");

  RestoreGUIControls();
  #endif
}

function testButtonTextColor() {
  SaveGUIControls();
  Test("Button.TextColor");

  int expectedColor = UpdateRedInButtonTextColor(128);
  btnTest.TweenTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(btnTest.TextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInButtonTextColor(128);
  btnTest.TweenTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(btnTest.TextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInButtonTextColor(128);
  btnTest.TweenTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(btnTest.TextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  btnTest.TweenTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(btnTest.TextColor, toColor, "Color");

  RestoreGUIControls();

  btnTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(btnTest.TextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInButtonTextColor(128);
  btnTest.TweenTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  btnTest.StopTweenTextColorRed(eFinishTween);
  ExpectIntToBe(btnTest.TextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInButtonTextColor(128);
  btnTest.TweenTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  btnTest.StopTweenTextColorGreen(eFinishTween);
  ExpectIntToBe(btnTest.TextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInButtonTextColor(128);
  btnTest.TweenTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  btnTest.StopTweenTextColorBlue(eFinishTween);
  ExpectIntToBe(btnTest.TextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  btnTest.TweenTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  btnTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(btnTest.TextColor, toColor, "Color Finish");

  RestoreGUIControls();

  btnTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  btnTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(btnTest.TextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
}

function testLabelTextColor() {
  SaveGUIControls();
  Test("Label.TextColor");

  int expectedColor = UpdateRedInLabelTextColor(128);
  lblTest.TweenTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lblTest.TextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInLabelTextColor(128);
  lblTest.TweenTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lblTest.TextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInLabelTextColor(128);
  lblTest.TweenTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lblTest.TextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lblTest.TweenTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lblTest.TextColor, toColor, "Color");

  RestoreGUIControls();

  lblTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lblTest.TextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInLabelTextColor(128);
  lblTest.TweenTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lblTest.StopTweenTextColorRed(eFinishTween);
  ExpectIntToBe(lblTest.TextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInLabelTextColor(128);
  lblTest.TweenTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lblTest.StopTweenTextColorGreen(eFinishTween);
  ExpectIntToBe(lblTest.TextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInLabelTextColor(128);
  lblTest.TweenTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lblTest.StopTweenTextColorBlue(eFinishTween);
  ExpectIntToBe(lblTest.TextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lblTest.TweenTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lblTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(lblTest.TextColor, toColor, "Color Finish");

  RestoreGUIControls();

  lblTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lblTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(lblTest.TextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
}

function testTextBoxTextColor() {
  SaveGUIControls();
  Test("TextBox.TextColor");

  int expectedColor = UpdateRedInTextBoxTextColor(128);
  txtTest.TweenTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(txtTest.TextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInTextBoxTextColor(128);
  txtTest.TweenTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(txtTest.TextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInTextBoxTextColor(128);
  txtTest.TweenTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(txtTest.TextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  txtTest.TweenTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(txtTest.TextColor, toColor, "Color");

  RestoreGUIControls();

  txtTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(txtTest.TextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInTextBoxTextColor(128);
  txtTest.TweenTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  txtTest.StopTweenTextColorRed(eFinishTween);
  ExpectIntToBe(txtTest.TextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInTextBoxTextColor(128);
  txtTest.TweenTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  txtTest.StopTweenTextColorGreen(eFinishTween);
  ExpectIntToBe(txtTest.TextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInTextBoxTextColor(128);
  txtTest.TweenTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  txtTest.StopTweenTextColorBlue(eFinishTween);
  ExpectIntToBe(txtTest.TextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  txtTest.TweenTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  txtTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(txtTest.TextColor, toColor, "Color Finish");

  RestoreGUIControls();

  txtTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  txtTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(txtTest.TextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
}

function testListBoxSelectedBackColor() {
  #ifdef SCRIPT_API_v350
  SaveGUIControls();
  Test("ListBox.SelectedBackColor");

  int expectedColor = UpdateRedInListBoxSeletedBackColor(128);
  lstTest.TweenSelectedBackColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInListBoxSeletedBackColor(128);
  lstTest.TweenSelectedBackColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInListBoxSeletedBackColor(128);
  lstTest.TweenSelectedBackColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lstTest.TweenSelectedBackColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "Color");

  RestoreGUIControls();

  lstTest.TweenSelectedBackColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInListBoxSeletedBackColor(128);
  lstTest.TweenSelectedBackColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColorRed(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInListBoxSeletedBackColor(128);
  lstTest.TweenSelectedBackColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColorGreen(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInListBoxSeletedBackColor(128);
  lstTest.TweenSelectedBackColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColorBlue(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedBackColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "Color Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedBackColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
  #endif
}

function testListBoxSelectedTextColor() {
  #ifdef SCRIPT_API_v350
  SaveGUIControls();
  Test("ListBox.SelectedTextColor");

  int expectedColor = UpdateRedInListBoxSeletedTextColor(128);
  lstTest.TweenSelectedTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInListBoxSeletedTextColor(128);
  lstTest.TweenSelectedTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInListBoxSeletedTextColor(128);
  lstTest.TweenSelectedTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lstTest.TweenSelectedTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "Color");

  RestoreGUIControls();

  lstTest.TweenSelectedTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInListBoxSeletedTextColor(128);
  lstTest.TweenSelectedTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColorRed(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInListBoxSeletedTextColor(128);
  lstTest.TweenSelectedTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColorGreen(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInListBoxSeletedTextColor(128);
  lstTest.TweenSelectedTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColorBlue(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "Color Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
  #endif
}

function testListBoxTextColor() {
  #ifdef SCRIPT_API_v350
  SaveGUIControls();
  Test("ListBox.TextColor");

  int expectedColor = UpdateRedInListBoxTextColor(128);
  lstTest.TweenTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInListBoxTextColor(128);
  lstTest.TweenTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInListBoxTextColor(128);
  lstTest.TweenTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lstTest.TweenTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "Color");

  RestoreGUIControls();

  lstTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInListBoxTextColor(128);
  lstTest.TweenTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColorRed(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInListBoxTextColor(128);
  lstTest.TweenTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColorGreen(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInListBoxTextColor(128);
  lstTest.TweenTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColorBlue(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lstTest.TweenTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "Color Finish");

  RestoreGUIControls();

  lstTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
  #endif
}

function testStopAllTweens() {
  SaveGUIControls();
  Test("GUIControl.StopAllTweens");
  
  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lblTest.TweenTextColor(0.5, toColor, eEaseInBackTween, eNoBlockTween);
  lblTest.StopAllTweens(eFinishTween);
  ExpectIntToBe(lblTest.TextColor, toColor, "Color");
  
  RestoreGUIControls();
}

function room_AfterFadeIn()
{
  SaveGUIControls();
  StartCutscene(eSkipESCOnly);

  testButtonTextColor();
  testTransparency();
  testLabelTextColor();
  testTextBoxTextColor();
  testListBoxSelectedBackColor();
  testListBoxSelectedTextColor();
  testListBoxTextColor();
  testStopAllTweens();

  EndCutscene();
  RestoreGUIControls();
  player.ChangeRoom(99);
}

function room_Load()
{
  gControlsTest.Visible = true;
}

function room_FirstLoad()
{
  SaveGUIControls();
  lstTest.FillDirList("*");
  lstTest.SelectedIndex = lstTest.ItemCount - 1;
}

function room_Leave()
{
  RestoreGUIControls();
  gControlsTest.Visible = false;
}

function room_RepExec()
{

}

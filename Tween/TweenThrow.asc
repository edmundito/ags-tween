// TERMS OF USE - AGS TWEEN MODULE (ags-tween)
//
// Copyright (c) 2009-present Edmundo Ruiz Ghanem
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#ifdef __TWEEN_MODULE__

#define MAX_PARABOLA_TWEENS 8

managed struct Parabola {
  float A;
  float B;
  float C;
  
  import float GetY(float x);
  import int GetYInt(int x);
};

Tween _objXTweens[MAX_PARABOLA_TWEENS];
Parabola* _parabolas[MAX_PARABOLA_TWEENS];
int _idx2ObjID[MAX_PARABOLA_TWEENS];

Parabola* CreateParabola(float x1, float y1, float x2, float y2, float x3, float y3) {
  // Calculate the determinants
  readonly float D = x1*x1*(x2 - x3) + x2*x2*(x3 - x1) + x3*x3*(x1 - x2);
  readonly float D1 = y1*(x2 - x3) + y2*(x3 - x1) + y3*(x1 - x2);
  readonly float D2 = x1*x1*(y2 - y3) + x2*x2*(y3 - y1) + x3*x3*(y1 - y2);
  readonly float D3 = x1*x1*(x2*y3 - x3*y2) + x2*x2*(x3*y1 - x1*y3) + x3*x3*(x1*y2 - x2*y1);

  Parabola* p = new Parabola;
  p.A = D1 / D;
  p.B = D2 / D;
  p.C = D3 / D;

  return p;
}

Parabola* CreateParabolaInt(int x1, int y1, int x2, int y2, int x3, int y3) {
  return CreateParabola(
    IntToFloat(x1),
    IntToFloat(y1),
    IntToFloat(x2),
    IntToFloat(y2),
    IntToFloat(x3),
    IntToFloat(y3)
  );
}

float Parabola::GetY(float x) {
  return this.A*(x*x) + this.B*x + this.C;
}

int Parabola::GetYInt(int x) {
  return FloatToInt(this.GetY(IntToFloat(x)), eRoundDown);
}

int FindFreeIndex() {
  for (int i = 0; i < MAX_PARABOLA_TWEENS; i++) {
    if (!_objXTweens[i].IsPlaying()) return i;
  }

  return -1;
}

int TweenThrow(this Object*, float timing, int peakX, int peakY, int endX, int endY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType) {
  readonly int idx = FindFreeIndex();
  if (idx < 0) {
    AbortGame("Too many throw tweens running. Max: %d", MAX_PARABOLA_TWEENS);
    return 0;
  }

  _idx2ObjID[idx] = this.ID;
  _parabolas[idx] = CreateParabolaInt(this.X, this.Y, peakX, peakY, endX, endY);
  readonly int loops = _objXTweens[idx].Init(timing, this.X, endX, easingType, style, startDelay, timingType);
  
  //System.Log(eLogInfo,  "%d,%d %d,%d %d,%d", this.X, this.Y, peakX, peakY, endX, endY);
  //System.Log(eLogInfo,  "%f %f %f", _parabolas[idx].A, _parabolas[idx].B, _parabolas[idx].C);

  if (style == eBlockTween) {
    Wait(loops);
    return 1;
  }

  return loops;
}

#region Events

void game_start() {
  for (int i = 0; i < MAX_PARABOLA_TWEENS; i++) {
    _objXTweens[i].Stop();
  }
}

void on_event(EventType event, int data) {
  if (event == eEventLeaveRoom) {
    for (int i = 0; i < MAX_PARABOLA_TWEENS; i++) {
      if (_objXTweens[i].IsPlaying()) {
        _objXTweens[i].Stop();
      }
    }
  }
}

void repeatedly_execute_always() {
  if (IsGamePaused()) return;

  int objID;

  for (int i = 0; i < MAX_PARABOLA_TWEENS; i++) {
    if (!_objXTweens[i].Update()) continue;

    objID = _idx2ObjID[i];
    object[objID].X = _objXTweens[i].Value;
    object[objID].Y = _parabolas[i].GetYInt(_objXTweens[i].Value);
  }
}

#endregion // Events

#endif // __TWEEN_MODULE__

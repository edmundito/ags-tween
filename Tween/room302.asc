// room script file

#ifdef SCRIPT_API_v3507
function testViewport(Viewport* viewport) {
  int r = 2;
  viewport.TweenWidth(1.0, Screen.Width / r, eEaseOutBounceTween);
  viewport.TweenHeight(1.0, Screen.Height / r, eEaseOutBounceTween);
  viewport.TweenX(1.0, Screen.Width / r, eEaseOutBounceTween);
  viewport.TweenY(1.0, Screen.Height / r, eEaseOutBounceTween);
  viewport.TweenPosition(1.0, 0, 0, Screen.Width, Screen.Height, eEaseInOutBackTween);
  viewport.TweenPosition(1.0, Screen.Width / r, Screen.Height / r, Screen.Width / r*2, Screen.Height / r*2, eEaseInOutBackTween);
}

function testScreenViewport() {
  testViewport(Screen.Viewport);

  Camera* camera = Camera.Create();
  camera.SetAt(0, 0);
  camera.SetSize(Screen.Width, Screen.Height);
  Viewport* viewport = Viewport.Create();
  viewport.Camera = camera;
  viewport.SetPosition(0, 0, Screen.Width, Screen.Height);
  viewport.Visible = true;
  //testViewport(viewport);

  viewport.Delete();
  //Screen.Viewport.SetPosition(0, 0, Screen.Width, Screen.Height);
}

function testCamera() {
  Camera* camera = Screen.Viewport.Camera;
  camera.TweenX(1.0, Room.Width, eEaseOutBounceTween);
  camera.TweenY(1.0, Room.Height, eEaseOutBounceTween);
  camera.TweenWidth(1.0, Screen.Width / 2, eEaseOutBackTween);
  camera.TweenHeight(1.0, Screen.Height / 2, eEaseOutBackTween);
  camera.TweenPosition(1.0, 0, 0, eEaseOutQuadTween);
  camera.TweenSize(1.0, Screen.Width, Screen.Height, eEaseOutBackTween);
}

function splitScreen(float timing, int toWidth, TweenEasingType easingType, TweenTimingType timingType) {
  // Pick up the main camera and viewport
  Camera* camera = Screen.Viewport.Camera;
  Viewport* viewport = Screen.Viewport;

  // Create a new camera
  Camera* camera2 = Camera.Create();
  // Set the camera position at the end of the screen size
  camera2.SetAt(Screen.Width, Screen.Height);
  // Set the size to 0 because the tween will resize it
  camera2.SetSize(0, Screen.Height);

  // Create a new viewport and assign the new camera:
  Viewport* viewport2 = Viewport.Create();
  // Set the position to the width of the screen, and shorten the width because tween will resize it
  // The viewport width must be a min of 1 otherwise it collapses the height (is this a bug or expected in ags 3.5.0?)
  viewport2.SetPosition(Screen.Width, 0, 1, Screen.Height);
  viewport2.Camera = camera2;

  WaitSeconds(1.0);

  // Disable the first camera auto tracking because
  // otherwise it will track the character and change the position while it resizes
  // You can disable this if that is the effect you want
  camera.AutoTracking = false;

  // Tween the width of the viewport to the target width - 1 (minus 1 so that there is a black line between the viewpors)
  viewport.TweenWidth(timing, toWidth - 1, easingType, eNoBlockTween, 0.0, timingType);
  // At the same time, tween the camera width to the same size as the viewport
  camera.TweenWidth(timing, toWidth - 1, easingType, eNoBlockTween, 0.0, timingType);

  // Tween the new viewport x to land 1 pixel past the first viewport
  viewport2.TweenX(timing, toWidth + 1, easingType, eNoBlockTween, 0.0, timingType);
  // At the same time, tween the viewport width so it can cover the screen as it moves
  viewport2.TweenWidth(timing, Screen.Width - toWidth - 1, easingType, eNoBlockTween, 0.0, timingType);
  // At the same time, tween the camera width to the same size as the viewport
  // Notice here tha the tween is set to blocking so that it can wait
  camera2.TweenWidth(timing, Screen.Width - toWidth - 1, easingType, eBlockTween, 0.0, timingType);

  // Just wait a bit to marvel the changes
  WaitSeconds(5.0);

  // Before leaving this demo, delete the new viewport and camera and reset all the camera settings
  viewport2.Delete();
  camera2.Delete();
  viewport.SetPosition(0, 0, Screen.Width, Screen.Height);
  camera.SetSize(Screen.Width, Screen.Height);
  camera.AutoTracking = true;
}
#endif

function testSystemGamma() {
  Test("System.Gamma");

  System.TweenGamma(1.0, 200, eEaseOutElasticTween);
  ExpectIntToBe(System.Gamma, 200, "Gamma");

  System.TweenGamma(1.0, 0, eEaseOutElasticTween, eNoBlockTween);
  System.StopTweenGamma(eFinishTween);
  ExpectIntToBe(System.Gamma, 0, "Stop");

  System.Gamma = 100;
}

function room_AfterFadeIn()
{
  StartCutscene(eSkipESCOnly);
  testSystemGamma();
  
  #ifdef SCRIPT_API_v3507
  //testCamera();
  //testScreenViewport();
  //testCamera();
  splitScreen(300.0, Screen.Width / 2, eEaseOutQuadTween, eTweenSpeed);
  splitScreen(300.0, Screen.Width / 3, eEaseOutBackTween, eTweenSpeed);
  splitScreen(200.0, Screen.Width / 3, eEaseOutElasticTween, eTweenSpeed);
  #endif
  EndCutscene();
  player.ChangeRoom(99);
}

function room_Load()
{
  Tween.IncreaseGameSpeed();
}

function room_FirstLoad()
{

}

function room_Leave()
{
  Tween.RestoreGameSpeed();
}

function room_RepExec()
{

}
